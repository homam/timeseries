// Generated by CoffeeScript 1.6.2
(function() {
  require.config({
    baseUrl: '',
    map: {
      '*': {
        'css': 'javascript/libs/require-css/css',
        'text': 'javascript/libs/require-text'
      }
    }
  });

  require(['chart-modules/bar/chart', 'chart-modules/bar-groups/chart', 'chart-modules/pie/chart', 'chart-modules/common/d3-tooltip', 'chart-modules/utils/reduceLongTail', 'chart-modules/utils/sum'], function(barChart, barGroupsChart, pieChart, tooltip, reduceLongTail, sum) {
    var chart, chartId, country, createSubMethodDeviceHierarchy, draw, drawSubMethodDeviceChart, fresh, fromDate, groupBy, lastTree, makeGroupByFunction, makeTreeByParentId, populateSubMethodsSelect, query, redraw, redrawSubMethodDeviceChart, subMethodDeviceConvChart, subMethodDeviceVisitsChart, sumVisitsWithChildren, toDate, visitsBySubMethodsChart, visitsBySubMethodsPieChart;

    sumVisitsWithChildren = function(d) {
      if (!!d.children && d.children.length > 0) {
        return (d.visits || 0) + d.children.map(function(c) {
          return sumVisitsWithChildren(c);
        }).reduce(function(a, b) {
          return a + b;
        });
      } else {
        return d.visits || 0;
      }
    };
    reduceLongTail = _.partial(reduceLongTail, (function(v) {
      return sumVisitsWithChildren(v) <= 100;
    }), function(tail) {
      var subs, visits;

      visits = sum(tail.map(function(v) {
        return v.visits;
      }));
      subs = sum(tail.map(function(v) {
        return v.subscribers;
      }));
      return {
        children: [],
        wurfl_fall_back: tail[0].wurfl_fall_back,
        wurfl_device_id: 'more...',
        brand_name: tail[0].brand_name,
        model_name: '..',
        device_os: tail[0].device_os,
        visits: visits,
        subscribers: subs,
        conv: subs / visits,
        collected_children: tail
      };
    });
    subMethodDeviceConvChart = barGroupsChart().yAxisTickFormat(d3.format('.1%'));
    subMethodDeviceVisitsChart = barGroupsChart().yAxisTickFormat(d3.format('.1%'));
    visitsBySubMethodsChart = barChart().tooltip(tooltip().text(function(d) {
      return JSON.stringify(d);
    }));
    visitsBySubMethodsPieChart = pieChart();
    drawSubMethodDeviceChart = function(node, data, compareConvWithOnlyConvertingDevices) {
      var allSubMethods, convHierarchy, existingSubMethods, m, rootName, targetDevices, totalVisits, visitsData, visitsHierarchy, zip, zipped, _i, _len, _ref;

      zip = function(n) {
        var c, subscribers, visits, wurflIds, zipped, _i, _len, _ref;

        zipped = n.children.map(function(c) {
          return zip(c);
        });
        if (n.collected_children) {
          zipped = zipped.concat(n.collected_children.map(function(c) {
            return zip(c);
          }));
        }
        visits = zipped.length === 0 ? 0 : zipped.map(function(d) {
          return d.visits;
        }).reduce(function(a, b) {
          return a + b;
        });
        subscribers = zipped.length === 0 ? 0 : zipped.map(function(d) {
          return d.subscribers;
        }).reduce(function(a, b) {
          return a + b;
        });
        wurflIds = _.flatten(zipped.map(function(c) {
          return c.wurflIds;
        }));
        if (!!n.wurfl_device_id) {
          wurflIds.push(n.wurfl_device_id);
        }
        if (!!n.collected_children) {
          _ref = n.collected_children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            wurflIds.push(c.wurfl_device_id);
          }
        }
        return {
          visits: (n.visits || 0) + visits,
          subscribers: (n.subscribers || 0) + subscribers,
          wurflIds: wurflIds
        };
      };
      zipped = zip(node);
      rootName = node.wurfl_device_id || zipped.wurflIds[0];
      convHierarchy = createSubMethodDeviceHierarchy(data, zipped.wurflIds, rootName, function(sarr, skey) {
        var mu, subGroupVisits;

        if (compareConvWithOnlyConvertingDevices) {
          sarr = sarr.filter(function(d) {
            return d.subscribers > 0;
          });
        }
        subGroupVisits = sum(sarr.map(function(a) {
          return a.visits;
        }));
        mu = sarr.length === 0 ? 0 : sum(sarr.map(function(a) {
          return a.subscribers;
        })) / subGroupVisits;
        return {
          name: skey,
          value: mu,
          stdev: sarr.length < 2 ? 0 : sum(sarr.map(function(d) {
            return Math.sqrt(Math.pow(d.conv - mu, 2)) * d.visits / subGroupVisits;
          }))
        };
      });
      d3.select('#submethodDevice-conv-chart').datum(convHierarchy).call(subMethodDeviceConvChart);
      visitsHierarchy = createSubMethodDeviceHierarchy(data, zipped.wurflIds, rootName, function(sarr, skey, marr, raw) {
        var mainGroupVisits, majorVisits, subGroupVisits;

        majorVisits = sum(raw.filter(function(d) {
          return d.device === skey;
        }).map(function(d) {
          return d.visits;
        }));
        mainGroupVisits = sum(marr.map(function(d) {
          return d.visits;
        }));
        subGroupVisits = sum(sarr.map(function(a) {
          return a.visits;
        }));
        return {
          name: skey,
          value: subGroupVisits / majorVisits,
          stdev: 0
        };
      });
      d3.select('#submethodDevice-visits-chart').datum(visitsHierarchy).call(subMethodDeviceVisitsChart);
      allSubMethods = convHierarchy.map(function(c) {
        return c.name;
      });
      targetDevices = data.filter(function(d) {
        return zipped.wurflIds.indexOf(d.wurfl_device_id) > -1;
      });
      visitsData = _.chain(targetDevices).groupBy(function(d) {
        return d.method;
      }).map(function(arr, key) {
        return {
          name: key,
          value: sum(arr.map(function(a) {
            return a.visits;
          }))
        };
      }).value();
      existingSubMethods = visitsData.map(function(c) {
        return c.name;
      });
      _ref = allSubMethods.filter(function(s) {
        return existingSubMethods.indexOf(s) < 0;
      });
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        visitsData.push({
          name: m,
          value: 0
        });
      }
      totalVisits = sum(visitsData.map(function(v) {
        return v.value;
      }));
      d3.select('#device-visits-bysubmethods-pie').datum(visitsData).call(visitsBySubMethodsPieChart);
      visitsBySubMethodsChart.tooltip().text(function(d) {
        return d.name + ' : ' + d3.format('%')(d.value / totalVisits);
      });
      return d3.select('#device-visits-bysubmethods-chart').datum(_(visitsData).sortBy(function(a) {
        return a.name;
      })).call(visitsBySubMethodsChart);
    };
    createSubMethodDeviceHierarchy = function(data, wurflIds, name, barMaker) {
      var allSubKeys, byDevices, byMethods, hierarchy, mainValueMap, subNameMap;

      data = data.map(function(d) {
        return {
          method: d.method,
          device: (wurflIds.indexOf(d.wurfl_device_id) > -1 ? name : 'Everything Else'),
          visits: d.visits,
          subscribers: d.subscribers,
          conv: d.conv
        };
      });
      byMethods = _(data).groupBy(function(d) {
        return d.method;
      });
      byDevices = _(data).groupBy(function(d) {
        return d.device;
      });
      hierarchy = _(byMethods).map(function(arr, key) {
        return {
          name: key,
          value: _.chain(arr).groupBy(function(d) {
            return d.device;
          }).map(function(sarr, skey) {
            return barMaker(sarr, skey, arr, data);
          }).value()
        };
      });
      mainValueMap = function(v) {
        return v.value;
      };
      subNameMap = function(v) {
        return v.name;
      };
      allSubKeys = _.uniq(_.flatten(hierarchy.map(function(d) {
        return mainValueMap(d).map(subNameMap);
      })));
      hierarchy = hierarchy.map(function(h) {
        allSubKeys.forEach(function(k, i) {
          if (!h.value[i] || h.value[i].name !== k) {
            return h.value.splice(i, 0, {
              name: k,
              value: 0,
              stdev: 0
            });
          }
        });
        return h;
      });
      return _(hierarchy).sortBy(function(v) {
        return v.name;
      });
    };
    chartId = 'chart';
    $("#chart-container").html('<section id="' + chartId + '"></section>');
    chart = treeMapZoomableChart();
    d3.select('#' + chartId).call(chart);
    draw = function(data, method, chartDataMap) {
      var chartData, groups, totalConv, totalStdevConv, totalSubs, totalVisits, tree;

      chartData = null;
      if (!method) {
        groups = _(data).groupBy(function(d) {
          return d.wurfl_device_id;
        });
        chartData = _(groups).map(function(arr, key) {
          var item, subscribers, visits;

          visits = sum(arr.map(function(d) {
            return d.visits;
          }));
          subscribers = sum(arr.map(function(d) {
            return d.subscribers;
          }));
          item = _.clone(arr[0]);
          item.visits = visits;
          item.subscribers = subscribers;
          item.conv = subscribers / visits;
          item.method = method;
          return item;
        });
      } else {
        chartData = data.filter((function(d) {
          return method === d.method;
        }));
      }
      totalVisits = chartData.map(function(d) {
        return d.visits;
      }).reduce(function(a, b) {
        return a + b;
      });
      totalSubs = chartData.map(function(d) {
        return d.subscribers;
      }).reduce(function(a, b) {
        return a + b;
      });
      totalConv = totalSubs / totalVisits;
      totalStdevConv = chartData.map(function(g) {
        return Math.sqrt(Math.pow(g.conv - totalConv, 2)) * g.visits / totalVisits;
      }).reduce(function(a, b) {
        return a + b;
      });
      chartData = chartDataMap(chartData);
      window.chartData = chartData;
      tree = {
        children: chartData,
        wurfl_device_id: 'root',
        brand_name: 'root',
        model_name: 'root',
        averageConversion: totalConv,
        stdevConversion: totalStdevConv,
        visits: 0
      };
      chart.draw(tree);
      return tree;
    };
    makeTreeByParentId = (function() {
      var addBack, pack;

      addBack = function(root) {
        if (root.children.length > 0) {
          root.children.forEach(addBack);
          root.children.push({
            children: [],
            wurfl_device_id: root.wurfl_device_id,
            wurfl_fall_back: root.wurfl_fall_back,
            brand_name: root.brand_name,
            model_name: root.model_name,
            conv: root.conv,
            device_os: root.device_os,
            visits: root.visits,
            subscribers: root.subscribers
          });
          root.visits = 0;
          root.subscribers = 0;
          return root.conv = 0;
        }
      };
      pack = function(root, data, cutLongTail) {
        data.forEach(function(d, i) {
          if (d !== null && d.wurfl_fall_back === root.wurfl_device_id) {
            data = pack(d, data, cutLongTail);
            root.children.push(d);
            if (cutLongTail) {
              root.children = reduceLongTail(root.children);
            }
            return data[i] = null;
          }
        });
        return data;
      };
      return function(cutLongTail, data) {
        var _i, _j, _ref, _ref1, _results, _results1;

        (function() {
          _results = [];
          for (var _i = 0, _ref = data.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this).forEach(function(i) {
          var d;

          d = data[i];
          if (!!d) {
            data = pack(data[i], data, cutLongTail);
          }
          return data = data.filter(function(d) {
            return d !== null;
          });
        });
        (function() {
          _results1 = [];
          for (var _j = 0, _ref1 = data.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; 0 <= _ref1 ? _j++ : _j--){ _results1.push(_j); }
          return _results1;
        }).apply(this).forEach(function(i) {
          return addBack(data[i]);
        });
        if (cutLongTail) {
          return reduceLongTail(data);
        } else {
          return data;
        }
      };
    })();
    groupBy = function(childrenMap, what, data) {
      var groups;

      groups = _(data).groupBy(what);
      return _(groups).map(function(darr) {
        var groupAverageConv, groupStdevConversion, groupSubs, groupVisits;

        groupVisits = darr.map(function(d) {
          return d.visits;
        }).reduce(function(a, b) {
          return a + b;
        });
        groupSubs = darr.map(function(d) {
          return d.subscribers;
        }).reduce(function(a, b) {
          return a + b;
        });
        groupAverageConv = groupSubs / groupVisits;
        groupStdevConversion = darr.map(function(g) {
          return Math.sqrt(Math.pow(g.conv - groupAverageConv, 2)) * g.visits / groupVisits;
        }).reduce(function(a, b) {
          return a + b;
        });
        return {
          averageConversion: groupAverageConv,
          stdevConversion: groupStdevConversion,
          children: childrenMap(darr)
        };
      });
    };
    makeGroupByFunction = function(order, treefy, cutLongTail) {
      var l, lastF, t;

      order = _(order).reverse();
      t = treefy ? _.partial(makeTreeByParentId, cutLongTail) : _.identity;
      l = cutLongTail && !treefy ? reduceLongTail : _.identity;
      lastF = _.compose(t, l);
      order.forEach(function(p) {
        return lastF = _.partial(groupBy, lastF, function(d) {
          return d[p];
        });
      });
      return lastF;
    };
    query = (function() {
      var cached, cachedKey, getCache, makeCacheKey, saveCache;

      cached = null;
      cachedKey = null;
      makeCacheKey = function(f, t, c) {
        return c + f.valueOf() + t.valueOf();
      };
      getCache = function(fromDate, toDate, country) {
        return null;
      };
      saveCache = function(fromDate, toDate, country, value) {
        cachedKey = makeCacheKey(fromDate, toDate, country);
        return cached = value;
      };
      return function(fromDate, toDate, country) {
        var dates, gets, p, timezone, _i, _ref, _results;

        p = $.Deferred();
        if (getCache(fromDate, toDate, country)) {
          p.resolve(cached);
        } else {
          timezone = new Date().getTimezoneOffset() * -60 * 1000;
          dates = (toDate.valueOf() - fromDate.valueOf()) / (1000 * 60 * 60 * 24);
          gets = (function() {
            _results = [];
            for (var _i = 0, _ref = dates - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this).map(function(i) {
            return fromDate.valueOf() + (i * (1000 * 60 * 60 * 24)) + timezone;
          }).map(function(d) {
            return {
              date: d,
              dateName: new Date(d).toISOString().split('T')[0]
            };
          }).map(function(d) {
            return {
              date: d.date,
              dateName: d.dateName,
              def: $.get('charts/devicedet-controls/data/' + country + '-' + d.dateName + '.csv')
            };
          });
          $.when.apply($, gets.map(function(d) {
            return d.def;
          })).done(function() {
            var items;

            items = null;
            if (gets.length > 1) {
              items = _.chain(Array.prototype.slice.call(arguments, 0).map(function(d) {
                return d3.csv.parse(d[0]);
              })).flatten();
            } else {
              items = _.chain(d3.csv.parse(arguments[0]));
            }
            items = items.groupBy('wurfl_device_id').map(function(deviceArr) {
              return _.chain(deviceArr).groupBy('Method').map(function(arr, method) {
                var subscribers, visits;

                visits = sum(arr.map(function(d) {
                  return +d.Visits;
                }));
                subscribers = sum(arr.map(function(d) {
                  return +d.Subscribers;
                }));
                return {
                  wurfl_device_id: arr[0].wurfl_device_id,
                  wurfl_fall_back: arr[0].wurfl_fall_back,
                  brand_name: arr[0].brand_name,
                  model_name: arr[0].model_name,
                  device_os: arr[0].device_os,
                  visits: visits,
                  subscribers: subscribers,
                  method: method,
                  conv: subscribers / visits
                };
              }).value();
            }).flatten().value();
            p.resolve(items);
            return saveCache(fromDate, toDate, country, items);
          });
        }
        return p;
      };
    })();
    fromDate = new Date(2013, 6, 1);
    toDate = new Date(2013, 6, 15);
    country = 'om';
    ['ae', 'sa', 'om', 'iq', 'jo', 'lk'].sort().forEach(function(c) {
      return $("select[name=country]").append($("<option />").text(c));
    });
    $('#fromDate').val(d3.time.format('%Y-%m-%d')(fromDate));
    $('#toDate').val(d3.time.format('%Y-%m-%d')(new Date(toDate.valueOf() - (1000 * 60 * 60 * 24))));
    $("select[name=country]").val(country);
    $("input[type=date]").on('change', function() {
      var $this;

      $this = $(this);
      if ('fromDate' === $this.attr("id")) {
        fromDate = new Date($this.val());
      }
      if ('toDate' === $this.attr("id")) {
        toDate = new Date($this.val());
        toDate = new Date(toDate.valueOf() + (1000 * 60 * 60 * 24));
      }
      return redraw(false);
    });
    $("select[name=country]").change(function() {
      country = $("select[name=country]").val();
      return redraw(true);
    });
    fresh = function() {
      return query(fromDate, toDate, country).done(function(items) {
        return _.chain(items).map(function(i) {
          i.children = [];
          return i;
        }).clone().value();
      });
    };
    window.fresh = fresh;
    populateSubMethodsSelect = function(data) {
      var $options, subMethods;

      subMethods = _.chain(data).map(function(d) {
        return d.method;
      }).uniq().value();
      subMethods.push('');
      $('#submethods').html('');
      d3.select('#submethods').data([subMethods]).on('change', function() {
        return redraw();
      });
      $options = d3.select('#submethods').selectAll('option').data(function(d) {
        return d;
      });
      $options.enter().append('option').text(function(d) {
        return d;
      });
      return $options.exit().remove(function(d) {
        debugger;
      });
    };
    lastTree = null;
    redrawSubMethodDeviceChart = function(tree) {
      if (tree == null) {
        tree = null;
      }
      return fresh().done(function(data) {
        tree = tree || lastTree;
        lastTree = tree;
        return drawSubMethodDeviceChart(tree, data, $('#onlyConvertingDevices')[0].checked);
      });
    };
    redraw = function(countryChanged) {
      return fresh().done(function(data) {
        var groupBys;

        if (countryChanged) {
          populateSubMethodsSelect(data);
        }
        groupBys = ($('#groupbys-bin').find('li').map(function() {
          return $(this).attr('data-groupby');
        })).get();
        return setTimeout(function() {
          var tree;

          tree = draw(data, $("#submethods").val(), makeGroupByFunction(groupBys, $('#treefy')[0].checked, $('#collectLongTail')[0].checked));
          return redrawSubMethodDeviceChart(tree);
        }, 10);
      });
    };
    redraw(true);
    window.redraw = redraw;
    return $(function() {
      $('#groupbys-bin, #groupbys').sortable({
        connectWith: '.connected'
      });
      $('#groupbys-bin, #groupbys').on('dragend', function() {
        return redraw();
      });
      $('#treefy, #collectLongTail').on('change', function() {
        return redraw();
      });
      $('#onlyConvertingDevices').on('change', function() {
        return redrawSubMethodDeviceChart();
      });
      return chart.zoomed(function(node) {
        return redrawSubMethodDeviceChart(node);
      });
    });
  });

}).call(this);
