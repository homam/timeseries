// Generated by CoffeeScript 1.6.2
(function() {
  var LineGroup, exports;

  exports = exports != null ? exports : this;

  LineGroup = (function() {
    function LineGroup(yScale, maps) {
      this.yScale = yScale;
      this.maps = maps;
    }

    return LineGroup;

  })();

  exports.complexTimeSeriesChart = function() {
    var X, Ys, chart, height, lines, margin, width, xAxis, xScale, xValue, yScale, yValues;

    lines = [[]];
    margin = {
      top: 20,
      right: 20,
      bottom: 20,
      left: 20
    };
    width = 720;
    height = 300;
    xValue = function(d) {
      return d[0];
    };
    yValues = [
      (function(d) {
        return d[1];
      }), (function(d) {
        return d[1];
      })
    ];
    xScale = d3.time.scale();
    yScale = d3.scale.linear();
    X = function(d) {
      return xScale(d[0]);
    };
    Ys = yValues.map(function(_, i) {
      return function(d) {
        return yScale(_(d)[i]);
      };
    });
    xAxis = d3.svg.axis().scale(xScale).orient('bottom').tickSize(6, 0);
    lines = yValues.map(function(_, i) {
      return d3.svg.line().x(X).y(Ys[i]);
    });
    chart = function(selection) {
      return selection.each(function(raw) {
        var data, g, gEnter, svg;

        data = raw.map(function(d, i) {
          return [
            xValue.call(raw, d, i), yValues.map(function(yValue) {
              return yValue.call(raw, d, i);
            })
          ];
        });
        xScale.domain(d3.extent(data, function(d) {
          return d[0];
        }));
        xScale.range([0, width - margin.left - margin.right]);
        yScale.domain(d3.extent(data, function(d) {
          return d[1][0];
        }));
        yScale.range([height - margin.top - margin.bottom, 0]);
        svg = d3.select(this).selectAll('svg').data([data]);
        gEnter = svg.enter().append('svg').append('g');
        gEnter.append('g').attr('class', 'x axis');
        g = svg.select('g');
        yValues.forEach(function(_, i) {
          gEnter.append('path').attr('class', 'line line-' + i);
          return g.select('.line-' + i).attr('d', lines[i]);
        });
        svg.attr('width', width);
        svg.attr('height', height);
        g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
        return g.select('.x.axis').attr('transform', 'translate(0, ' + (height - margin.top - margin.bottom) + ')').call(xAxis);
      });
    };
    chart.margin = function(value) {
      margin = value != null ? value : margin;
      return chart;
    };
    chart.width = function(value) {
      width = value != null ? value : width;
      return chart;
    };
    chart.height = function(value) {
      height = value != null ? value : height;
      return chart;
    };
    chart.x = function(map) {
      xValue = map != null ? map : xValue;
      return chart;
    };
    chart.ys = function(map) {
      yValues = map != null ? map : yValues;
      return chart;
    };
    return chart;
  };

}).call(this);
