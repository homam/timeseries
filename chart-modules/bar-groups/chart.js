// Generated by CoffeeScript 1.6.2
(function() {
  define(['../common/property'], function(Property) {
    return function() {
      var chart, color, dispatch, height, mainNameMap, mainValueMap, margin, properties, subNameMap, subValueDevMap, subValueMap, tooltip, width, x0, x1, xAxis, y, yAxis;

      margin = {
        top: 20,
        right: 0,
        bottom: 20,
        left: 70
      };
      width = 720;
      height = 300;
      x0 = d3.scale.ordinal().rangeRoundBands([0, width], .1);
      x1 = d3.scale.ordinal();
      y = d3.scale.linear().range([height, 0]);
      xAxis = d3.svg.axis().scale(x0).orient('bottom');
      yAxis = d3.svg.axis().scale(y).orient('left').tickFormat(d3.format(',')).tickSize(-width, 0, 0);
      mainNameMap = function(d) {
        return d.name;
      };
      subNameMap = function(d) {
        return d.name;
      };
      mainValueMap = function(d) {
        return d.value;
      };
      subValueMap = function(d) {
        return d.value;
      };
      subValueDevMap = function(d) {
        return d.stdev;
      };
      color = d3.scale.category10();
      tooltip = function() {};
      dispatch = d3.dispatch('mouseover', 'mouseout');
      properties = {
        width: new Property(function(value) {
          width = value - margin.left - margin.right;
          x0.rangeRoundBands([0, width], .1);
          return yAxis.tickSize(-width, 0, 0);
        }),
        height: new Property(function(value) {
          height = value - margin.top - margin.bottom;
          return y.range([height, 0]);
        }),
        margin: new Property(function(value) {
          margin = value;
          properties.width.reset();
          return properties.height.reset();
        }),
        yAxisTickFormat: new Property(function(value) {
          return yAxis.tickFormat(value);
        }),
        mainNames: new Property(function(value) {
          return mainNameMap = value;
        }),
        mainValues: new Property(function(value) {
          return mainValueMap = value;
        }),
        subNames: new Property(function(value) {
          return subNameMap = value;
        }),
        subValues: new Property(function(value) {
          return subValueMap = value;
        }),
        subDevs: new Property(function(value) {
          return subValueDevMap = value;
        }),
        tooltip: new Property(function(value) {
          return tooltip = value;
        })
      };
      properties.width.set(width);
      properties.height.set(height);
      chart = function(selection) {
        return selection.each(function(data) {
          var $devG, $devLowerLine, $devUpperLine, $devrect, $g, $gEnter, $legend, $legendEnter, $main, $rect, $selection, $svg, $xAxis, $yAxis, allMainKeys, allSubKeys, hierarchy;

          $selection = d3.select(this);
          $svg = $selection.selectAll('svg').data([data]);
          $gEnter = $svg.enter().append('svg').append('g');
          $svg.attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom);
          $g = $svg.select('g').attr('transform', "translate(" + margin.left + "," + margin.top + ")");
          $gEnter.append('g').attr('class', 'x axis');
          $xAxis = $svg.select('.x.axis').attr("transform", "translate(0," + height + ")");
          $gEnter.append('g').attr('class', 'y axis');
          $yAxis = $svg.select('.y.axis');
          hierarchy = data;
          allSubKeys = _.uniq(_.flatten(hierarchy.map(function(d) {
            return mainValueMap(d).map(subNameMap);
          })));
          allMainKeys = _.flatten(hierarchy.map(mainNameMap));
          x0.domain(allMainKeys);
          x1.domain(allSubKeys).rangeRoundBands([0, x0.rangeBand()]);
          y.domain([
            0, d3.max(_.flatten(hierarchy.map(function(h) {
              return mainValueMap(h).map(subValueMap);
            })))
          ]);
          $main = $g.selectAll('.main').data(hierarchy);
          $main.enter().append('g').attr('class', 'main');
          $main.attr('transform', function(d) {
            return "translate(" + x0(mainNameMap(d)) + ",0)";
          });
          $rect = $main.selectAll('rect.conv').data(mainValueMap);
          $rect.enter().append('rect').attr('class', 'conv').call(tooltip);
          $rect.transition().duration(200).attr('width', x1.rangeBand()).attr('x', function(d, i) {
            return x1(subNameMap(d));
          }).attr('y', function(d) {
            return y(subValueMap(d));
          }).attr('height', function(d) {
            return height - y(subValueMap(d));
          }).style('fill', function(d, i) {
            return color(allSubKeys.indexOf(mainNameMap(d)));
          });
          $rect.exit().attr('y', function(d) {
            return 0;
          }).attr('height', 0);
          $devG = $main.selectAll('g.dev').data(mainValueMap);
          $devG.enter().append('g').attr('class', 'dev');
          $devG.transition().duration(200).attr('transform', function(d) {
            return 'translate(0,' + (-height + y(mainValueMap(d)) - (-height + y(subValueDevMap(d))) / 2) + ')';
          });
          $devUpperLine = $devG.selectAll('line.dev.up').data(function(d) {
            return [d];
          });
          $devUpperLine.enter().append('line').attr('class', 'dev up');
          $devUpperLine.transition().duration(200).attr('x1', _.compose(x1, subNameMap)).attr('x2', function(d) {
            return _.compose(x1, subNameMap)(d) + x1.rangeBand();
          }).attr('y1', _.compose(y, subValueDevMap)).attr('y2', _.compose(y, subValueDevMap));
          $devLowerLine = $devG.selectAll('line.dev.low').data(function(d) {
            return [d];
          });
          $devLowerLine.enter().append('line').attr('class', 'dev low');
          $devLowerLine.transition().duration(200).attr('x1', _.compose(x1, subNameMap)).attr('x2', function(d) {
            return _.compose(x1, subNameMap)(d) + x1.rangeBand();
          }).attr('y1', function(d) {
            return y(0);
          }).attr('y2', function(d) {
            return y(0);
          });
          $devrect = $devG.selectAll('rect.dev').data(function(d) {
            return [d];
          });
          $devrect.enter().append('rect').attr('class', 'dev');
          $devrect.transition().duration(200).attr('width', x1.rangeBand() * .25).attr('x', function(d) {
            return x1(subNameMap(d)) + x1.rangeBand() * .375;
          }).attr('y', _.compose(y, subValueDevMap)).attr('height', function(d) {
            return height - (_.compose(y, subValueDevMap))(d);
          });
          $devG.exit().select('rect').attr('height', 0).attr('y', function() {
            return 0;
          }).attr('width', 0);
          $devG.exit().selectAll('line').attr('y1', 0).attr('y2', 0);
          $xAxis.transition().duration(200).call(xAxis);
          $yAxis.transition().duration(200).call(yAxis);
          $legend = $g.selectAll('.legend').data(allSubKeys);
          $legendEnter = $legend.enter().append('g').attr('class', 'legend');
          $legend.attr('transform', function(d, i) {
            return "translate(0," + (i * 20 - margin.top) + ")";
          });
          $legendEnter.append('rect');
          $legend.select('rect').attr('x', width - 18).attr('width', 18).attr('height', 18).style('fill', function(d) {
            return color(allSubKeys.indexOf(d));
          });
          $legendEnter.append('text');
          $legend.select('text').attr('x', width - 24).attr('y', 9).attr('dy', '.35em').style('text-anchor', 'end').text(function(d) {
            return d;
          });
          return null;
        });
      };
      null;
      chart = Property.expose(chart, properties);
      chart.mouseover = function(handler) {
        return dispatch.on('mouseover', handler);
      };
      return chart;
    };
  });

}).call(this);
