// Generated by CoffeeScript 1.6.2
(function() {
  require.config({
    baseUrl: '',
    map: {
      '*': {
        'css': '/javascript/libs/require-css/css',
        'text': '/javascript/libs/require-text'
      }
    }
  });

  require(['chart.js', '../common/d3-tooltip.js', '../utils/sum.js'], function(chartMaker, tooltip, sum) {
    return $.get("data.js").done(function(raw) {
      var $offsets, chart, plot;

      raw = JSON.parse(raw);
      chart = chartMaker().key(function(g) {
        return g.method;
      }).values(function(g) {
        return g.values;
      }).x(function(d) {
        return d.day;
      }).y(function(d) {
        return d.visits;
      }).mouseover(function(key) {
        return console.log('over', key);
      }).mouseout(function(key) {
        return console.log('out', key);
      }).mousemove(function(date) {});
      plot = function(toDate) {
        var chartData, colors, data, dateRange, groups, msInaDay;

        data = raw.filter(function(d) {
          return d[0].date < toDate.valueOf();
        });
        groups = _(data.map(function(tuple) {
          return tuple[1].map(function(md) {
            return {
              method: md.method,
              date: tuple[0].date,
              visits: sum(md.data.map(function(d) {
                return d.visits;
              })),
              subscribers: sum(md.data.map(function(d) {
                return d.subscribers;
              }))
            };
          });
        })).chain().flatten().groupBy(function(d) {
          return d.method;
        }).value();
        dateRange = d3.extent(data.map(function(d) {
          return new Date(d[0].date);
        }));
        msInaDay = 24 * 60 * 60 * 1000;
        _.keys(groups).forEach(function(key) {
          var d, day, group, howMany, i, index, _i, _j, _k, _ref, _ref1, _ref2, _results, _results1, _results2;

          group = groups[key];
          index = -1;
          _results = [];
          for (i = _i = _ref = +dateRange[0], _ref1 = +dateRange[1]; msInaDay > 0 ? _i <= _ref1 : _i >= _ref1; i = _i += msInaDay) {
            ++index;
            day = new Date(i);
            d = _(group).filter(function(d) {
              return Math.abs(d.date - +day) < 1000;
            })[0];
            if (!d) {
              d = {
                method: key,
                date: day.valueOf(),
                visits: 0,
                subscribers: 0
              };
              group.splice(index, 0, d);
            }
            d.day = day;
            d.conv = d.visits > 0 ? d.subscribers / d.visits : 0;
            howMany = 6;
            d.conv_cma = (function() {
              _results1 = [];
              for (var _j = -howMany; -howMany <= index ? _j <= index : _j >= index; -howMany <= index ? _j++ : _j--){ _results1.push(_j); }
              return _results1;
            }).apply(this).map(function(j) {
              return group[j > -1 ? j : 0].conv;
            }).reduce(function(a, b) {
              return a + b;
            }) / (index + howMany + 1);
            d.conv_ma = (function() {
              _results2 = [];
              for (var _k = _ref2 = index - howMany; _ref2 <= index ? _k <= index : _k >= index; _ref2 <= index ? _k++ : _k--){ _results2.push(_k); }
              return _results2;
            }).apply(this).map(function(j) {
              return group[j > -1 ? j : 0].conv;
            }).reduce(function(a, b) {
              return a + b;
            }) / (howMany + 1);
            _results.push(groups[key] = group);
          }
          return _results;
        });
        chartData = _(groups).map(function(arr, method) {
          return {
            method: method,
            values: arr,
            visits: sum(arr.map(function(d) {
              return d.visits;
            }))
          };
        });
        colors = d3.scale.category20();
        chartData = _(chartData).sortBy(function(a) {
          return -a.visits;
        }).map(function(g, i) {
          g.color = colors(i);
          return g;
        });
        console.log(JSON.parse(JSON.stringify(chartData)));
        return d3.select('#chart').datum(chartData).call(chart);
      };
      plot(new Date(2013, 6, 14));
      setTimeout(function() {
        return plot(new Date(2013, 6, 9));
      }, 2000);
      $offsets = d3.select("body").selectAll('span.offset').data([
        {
          n: 'Cumulative',
          v: 'zero'
        }, {
          n: 'Normalized',
          v: 'expand'
        }
      ]).enter().append('span').attr('class', 'offset');
      $offsets.append('input').attr('type', 'radio').attr('name', 'offset').attr('id', function(d) {
        return 'offset-' + d.v;
      }).attr('checked', function(d) {
        if ('zero' === d.v) {
          return 'checked';
        } else {
          return null;
        }
      }).on('change', function(val) {
        chart.stackOffset(val.v);
        return d3.select('#chart').call(chart);
      });
      return $offsets.append('label').attr('for', function(d) {
        return 'offset-' + d.v;
      }).text(function(d) {
        return d.n;
      });
    });
  });

}).call(this);
