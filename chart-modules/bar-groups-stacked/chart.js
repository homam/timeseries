// Generated by CoffeeScript 1.6.2
(function() {
  define(['../common/property'], function(Property) {
    return function() {
      var chart, color, colorMap, dispatch, height, mainNameMap, mainValuesMap, margin, properties, subNameMap, subValueMap, tooltip, width, x, xAxis, y, yAxis;

      margin = {
        top: 60,
        right: 0,
        bottom: 20,
        left: 70
      };
      width = 720;
      height = 300;
      x = d3.scale.ordinal().rangeRoundBands([0, width], .1);
      y = d3.scale.linear().range([height, 0]);
      xAxis = d3.svg.axis().scale(x).orient('bottom');
      yAxis = d3.svg.axis().scale(y).orient('left').tickFormat(d3.format(',')).tickSize(-width, 0, 0);
      mainNameMap = function(d) {
        return d.name;
      };
      subNameMap = function(d) {
        return d.name;
      };
      mainValuesMap = function(d) {
        return d.values;
      };
      subValueMap = function(d) {
        return d.value;
      };
      colorMap = d3.scale.category10();
      color = d3.scale.category10();
      tooltip = function() {};
      dispatch = d3.dispatch('mouseover', 'mouseout');
      properties = {
        width: new Property(function(value) {
          width = value - margin.left - margin.right;
          x.rangeRoundBands([0, width], .1);
          return yAxis.tickSize(-width, 0, 0);
        }),
        height: new Property(function(value) {
          height = value - margin.top - margin.bottom;
          return y.range([height, 0]);
        }),
        margin: new Property(function(value) {
          margin = _.extend(margin, value);
          properties.width.reset();
          return properties.height.reset();
        }),
        yAxisTickFormat: new Property(function(value) {
          return yAxis.tickFormat(value);
        }),
        mainNames: new Property(function(value) {
          return mainNameMap = value;
        }),
        mainValues: new Property(function(value) {
          return mainValuesMap = value;
        }),
        subNames: new Property(function(value) {
          return subNameMap = value;
        }),
        subValues: new Property(function(value) {
          return subValueMap = value;
        }),
        normalized: new Property,
        transitionDuration: new Property,
        tooltip: new Property(function(value) {
          return tooltip = value;
        })
      };
      properties.width.set(width);
      properties.height.set(height);
      properties.normalized.set(false);
      properties.transitionDuration.set(500);
      chart = function(selection) {
        return selection.each(function(data) {
          var $g, $gEnter, $legend, $legendEnter, $main, $mainEnter, $rect, $selection, $svg, $xAxis, $yAxis, allMainKeys, allSubKeys, normalzied, transitionDuration;

          transitionDuration = properties.transitionDuration.get();
          normalzied = properties.normalized.get();
          allSubKeys = _.uniq(_.flatten(data.map(function(d) {
            return mainValuesMap(d).map(function(i) {
              return subNameMap(i);
            });
          })));
          data.forEach(function(d) {
            var y0;

            y0 = 0;
            d._children = allSubKeys.map(function(name) {
              return {
                name: name,
                y0: y0,
                y1: y0 += subValueMap(mainValuesMap(d).filter(function(a) {
                  return subNameMap(a) === name;
                })[0]),
                value: subValueMap(mainValuesMap(d).filter(function(a) {
                  return subNameMap(a) === name;
                })[0])
              };
            });
            if (normalzied) {
              d._children.forEach(function(d) {
                d.y0 /= y0;
                return d.y1 /= y0;
              });
            }
            return d._total = _.last(d._children).y1;
          });
          if (normalzied) {
            data.sort(function(a, b) {
              return a._children[0].y1 - b._children[0].y1;
            });
          } else {
            data.sort(function(a, b) {
              return b._total - a._total;
            });
          }
          allMainKeys = _.flatten(data.map(mainNameMap));
          x.domain(allMainKeys);
          y.domain([
            0, d3.max(data, function(d) {
              return d._total;
            })
          ]);
          $selection = d3.select(this);
          $svg = $selection.selectAll('svg').data([data]);
          $gEnter = $svg.enter().append('svg').append('g');
          $svg.attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom);
          $g = $svg.select('g').attr('transform', "translate(" + margin.left + "," + margin.top + ")");
          $gEnter.append('g').attr('class', 'x axis');
          $xAxis = $svg.select('.x.axis').attr("transform", "translate(0," + height + ")");
          $gEnter.append('g').attr('class', 'y axis');
          $yAxis = $svg.select('.y.axis');
          $main = $g.selectAll(".main").data(data);
          $mainEnter = $main.enter().append("g").attr("class", "main");
          $main.attr("transform", function(d) {
            return "translate(" + x(mainNameMap(d)) + ",0)";
          });
          $rect = $main.selectAll("rect").data(function(d) {
            return d._children;
          });
          $rect.enter().append("rect");
          $rect.transition().duration(transitionDuration).attr("width", x.rangeBand()).attr("y", function(d) {
            return y(d.y1);
          }).attr("height", function(d) {
            return y(d.y0) - y(d.y1);
          }).style("fill", function(d) {
            return colorMap(subNameMap(d));
          });
          $mainEnter.append('text');
          $main.select('text').attr('transform', 'translate(' + (x.rangeBand() / 2 - 6) + ', ' + (height * .9) + ') rotate(90) ').attr('text-anchor', 'end').text(function(d) {
            return d3.format(',')(d._children.map(subValueMap).reduce(function(a, b) {
              return a + b;
            }));
          });
          $xAxis.transition().duration(200).call(xAxis);
          $yAxis.transition().duration(200).call(yAxis);
          $legend = $g.selectAll('.legend').data(allSubKeys);
          $legendEnter = $legend.enter().append('g').attr('class', 'legend');
          $legend.attr('transform', function(d, i) {
            return "translate(0," + (i * 20 - margin.top) + ")";
          });
          $legendEnter.append('rect');
          $legend.select('rect').attr('x', width - 18).attr('width', 18).attr('height', 18).style('fill', function(d) {
            return color(allSubKeys.indexOf(d));
          });
          $legendEnter.append('text');
          $legend.select('text').attr('x', width - 24).attr('y', 9).attr('dy', '.35em').style('text-anchor', 'end').text(function(d) {
            return d;
          });
          return null;
        });
      };
      null;
      chart = Property.expose(chart, properties);
      chart.mouseover = function(handler) {
        return dispatch.on('mouseover', handler);
      };
      return chart;
    };
  });

}).call(this);
