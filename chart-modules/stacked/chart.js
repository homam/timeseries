// Generated by CoffeeScript 1.6.2
(function() {
  define(['../common/property'], function(Property) {
    return function() {
      var chart, dispatch, height, margin, properties, width, x, xAxis, y, yAxis;

      margin = {
        top: 20,
        right: 40,
        bottom: 20,
        left: 50
      };
      width = 720;
      height = 300;
      x = d3.time.scale();
      y = d3.scale.linear();
      xAxis = d3.svg.axis().scale(x).orient('bottom').tickFormat(d3.time.format("%b %d"));
      yAxis = d3.svg.axis().scale(y).orient('left');
      properties = {
        width: new Property(function(value) {
          width = value - margin.left - margin.right;
          x.range([0, width]);
          xAxis.scale(x);
          return yAxis.tickSize(-width, 0, 0);
        }),
        height: new Property(function(value) {
          height = value - margin.top - margin.bottom;
          xAxis.tickSize(-height, 0, 0);
          return y.range([height, 0]);
        }),
        margin: new Property(function(value) {
          margin = _.extend(margin, value);
          properties.width.reset();
          return properties.height.reset();
        }),
        x: new Property,
        y: new Property,
        values: new Property,
        key: new Property,
        keyFilter: new Property,
        stackOffset: new Property,
        transitionDuration: new Property,
        tooltip: new Property
      };
      properties.width.set(width);
      properties.height.set(height);
      properties.stackOffset.set('zero');
      properties.transitionDuration.set(500);
      properties.keyFilter.set(function() {
        return true;
      });
      dispatch = d3.dispatch('mouseover', 'mouseout', 'mousemove');
      chart = function(selection) {
        return selection.each(function(data) {
          var $g, $gEnter, $layer, $path, $selection, $svg, $xAxis, $yAxis, area, keyFilter, keyMap, keys, layers, scaleLayers, stack, stackOffset, transitionDuration, valuesMap, xMap, yMap;

          xMap = properties.x.get();
          yMap = properties.y.get();
          keyMap = properties.key.get();
          valuesMap = properties.values.get();
          keyFilter = properties.keyFilter.get();
          stackOffset = properties.stackOffset.get();
          transitionDuration = properties.transitionDuration.get();
          area = d3.svg.area().x(function(d) {
            return x(xMap(d));
          }).y0(function(d) {
            return y(d.y0);
          }).y1(function(d) {
            return y(d.y0 + d.y);
          });
          stack = d3.layout.stack().offset(stackOffset).x(xMap).y(yMap).order(function(sdata) {
            var m;

            m = sdata.map(function(d, i) {
              return {
                v: d.map(function(a) {
                  return a[1];
                }).reduce(function(a, b) {
                  return a + b;
                }),
                i: i
              };
            });
            m = _(m).sortBy(function(d) {
              return d.v;
            });
            return _(m).map(function(d) {
              return d.i;
            });
          }).values(valuesMap);
          layers = stack(data);
          console.log(layers);
          keys = data.map(keyMap).filter(keyFilter);
          layers = layers.map(function(layer) {
            if (keys.indexOf(keyMap(layer)) < 0) {
              (valuesMap(layer)).map(function(d) {
                d.y = d.y0 = 0;
                return d;
              });
            }
            return layer;
          });
          x.domain(d3.extent(valuesMap(layers[0]), xMap));
          scaleLayers = stack(data.filter(function(d) {
            return keyFilter(keyMap(d));
          }));
          y.domain([
            0, d3.max(scaleLayers, function(l) {
              return d3.max(valuesMap(l), function(d) {
                return d.y0 + d.y;
              });
            })
          ]);
          $selection = d3.select(this);
          $svg = $selection.selectAll('svg').data([data]);
          $gEnter = $svg.enter().append('svg').append('g');
          $svg.attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom);
          $g = $svg.select('g').attr('transform', "translate(" + margin.left + "," + margin.top + ")");
          $layer = $g.selectAll('.layer').data(layers);
          $layer.enter().append('g').attr('class', 'layer').on('mouseover', function(d) {
            return dispatch.mouseover(keyMap(d));
          }).on('mouseout', function(d) {
            return dispatch.mouseout(keyMap(d));
          }).on("mousemove", function() {
            var date;

            date = x.invert(d3.mouse(this)[0]);
            return dispatch.mousemove(date);
          });
          $layer.attr('data-key', function(d) {
            return keyMap(d);
          }).style('fill', function(d) {
            return d.color;
          }).transition().duration(500).ease("sin-in-out").delay(200).style('opacity', function(d) {
            if (keys.indexOf(keyMap(d)) < 0) {
              return 0;
            } else {
              return 1;
            }
          });
          $path = $layer.selectAll('path.area').data(function(d) {
            return [valuesMap(d)];
          });
          $path.enter().append('path').attr('class', 'area');
          $path.style('fill', function(d) {
            return d.color;
          });
          $path.transition().duration(1000).ease("sin-in-out").attr('d', area);
          $gEnter.append('g').attr('class', 'x axis');
          $xAxis = $svg.select('.x.axis').attr("transform", "translate(0," + height + ")");
          $xAxis.transition().duration(transitionDuration).call(xAxis).selectAll("text").style("text-anchor", "end").attr("dx", "-.8em").attr("dy", ".15em").attr("transform", "rotate(-90)");
          $gEnter.append('g').attr('class', 'y axis');
          $yAxis = $svg.select('.y.axis');
          $yAxis.transition().duration(transitionDuration).call(yAxis);
          return null;
        });
      };
      null;
      chart = Property.expose(chart, properties);
      chart.mouseover = function(delegate) {
        dispatch.on('mouseover', delegate);
        return chart;
      };
      chart.mouseout = function(delegate) {
        dispatch.on('mouseout', delegate);
        return chart;
      };
      chart.mousemove = function(delegate) {
        dispatch.on('mousemove', delegate);
        return chart;
      };
      return chart;
    };
  });

}).call(this);
