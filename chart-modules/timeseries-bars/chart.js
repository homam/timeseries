// Generated by CoffeeScript 1.6.2
(function() {
  define(['../common/property'], function(Property) {
    return function() {
      var chart, dispatch, height, margin, properties, width, x, xAxis, xB, y, yAxis, yB, yBAxis;

      margin = {
        top: 20,
        right: 40,
        bottom: 20,
        left: 50
      };
      width = 720;
      height = 300;
      x = d3.time.scale();
      y = d3.scale.linear();
      yB = d3.scale.linear();
      xB = d3.scale.ordinal();
      xAxis = d3.svg.axis().scale(x).orient('bottom');
      yAxis = d3.svg.axis().scale(y).orient('left');
      yBAxis = d3.svg.axis().scale(yB).orient('right');
      properties = {
        width: new Property(function(value) {
          width = value - margin.left - margin.right;
          yAxis.tickSize(-width, 0, 0);
          x.range([0, width]);
          return xB.rangeRoundBands([0, width], .2);
        }),
        height: new Property(function(value) {
          height = value - margin.top - margin.bottom;
          xAxis.tickSize(-height, 0, 0);
          y.range([height, 0]);
          return yB.range([height, 0]);
        }),
        margin: new Property(function(value) {
          margin = _.extend(margin, value);
          properties.width.reset();
          return properties.height.reset();
        }),
        x: new Property,
        y: new Property,
        yDomain: new Property,
        yB: new Property,
        yBDomain: new Property,
        transitionDuration: new Property,
        tooltip: new Property
      };
      properties.width.set(width);
      properties.height.set(height);
      properties.yDomain.set(function(ys) {
        return [0, d3.max(ys)];
      });
      properties.yBDomain.set(function(ys) {
        return [0, d3.max(ys)];
      });
      properties.transitionDuration.set(500);
      dispatch = d3.dispatch('mouseover', 'mouseout');
      chart = function(selection) {
        return selection.each(function(data) {
          var $g, $gEnter, $selection, $svg, $xAxis, $yAxis, $yBAxis, bisect, line, transitionDuration, xMap, yBMap, yMap;

          xMap = properties.x.get();
          yMap = properties.y.get();
          x.domain(d3.extent(data.map(xMap)));
          y.domain(properties.yDomain.get()(data.map(yMap)));
          yBMap = properties.yB.get();
          xB.domain(data.map(xMap)).rangeRoundBands([0, width], .2);
          yB.domain(properties.yBDomain.get()(data.map(yBMap)));
          $selection = d3.select(this);
          $svg = $selection.selectAll('svg').data([data]);
          $gEnter = $svg.enter().append('svg').append('g');
          $svg.attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom);
          $g = $svg.select('g').attr('transform', "translate(" + margin.left + "," + margin.top + ")");
          $gEnter.append('g').attr('class', 'x axis');
          $xAxis = $svg.select('.x.axis').attr("transform", "translate(0," + height + ")");
          $gEnter.append('g').attr('class', 'y axis');
          $yAxis = $svg.select('.y.axis');
          $gEnter.append('g').attr('class', 'y axis bar');
          $yBAxis = $svg.select('.y.axis.bar').attr('transform', 'translate(' + width + ',0)').attr('opacity', 1);
          $yBAxis.append('text').attr('transform', 'translate(0,0) rotate(90)').attr('y', 6).attr('dy', '.71em').style('text-anchor', 'start').text('Y');
          transitionDuration = properties.transitionDuration.get();
          line = d3.svg.line().interpolate('basis').x(_.compose(x, xMap)).y(_.compose(y, yMap));
          $g.selectAll('path.line').data([data]).enter().append('path').attr('class', 'line');
          $g.selectAll('path.line').transition().duration(transitionDuration).ease("sin-in-out").attr('d', line);
          $g.selectAll('rect.bar').data(data).enter().append('rect').attr('class', 'bar');
          $g.selectAll('rect.bar').attr('width', xB.rangeBand()).transition().duration(transitionDuration).ease("sin-in-out").attr('x', _.compose(x, xMap)).attr('y', _.compose(yB, yBMap)).attr('height', function(d) {
            return height - _.compose(yB, yBMap)(d);
          });
          bisect = d3.bisector(xMap).right;
          $gEnter.append("rect").attr("class", "tooltip-overlay").attr("width", width).attr("height", height).on("mouseout", function() {
            return dispatch.mouseout();
          }).on("mousemove", function() {
            var val, x0;

            x0 = x.invert(d3.mouse(this)[0]);
            val = bisect(data, x0);
            return dispatch.mouseover(data[val]);
          });
          $xAxis.transition().duration(transitionDuration).call(xAxis);
          $yAxis.transition().duration(transitionDuration).call(yAxis);
          $yBAxis.transition().duration(transitionDuration).call(yBAxis);
          return null;
        });
      };
      null;
      chart = Property.expose(chart, properties);
      chart.mouseover = function(handler) {
        return dispatch.on('mouseover', handler);
      };
      return chart;
    };
  });

}).call(this);
