// Generated by CoffeeScript 1.6.2
(function() {
  var exports;

  exports = exports != null ? exports : this;

  exports.multiLineTimeSeriesChart = function() {
    var chart, height, keyFilter, keyMap, margin, mouseEvents, valuesMap, width, xMap, xScale, yMap, yScale;

    margin = {
      top: 20,
      right: 40,
      bottom: 20,
      left: 50
    };
    width = 720;
    height = 300;
    xMap = function(d) {
      return d[0];
    };
    yMap = function(d) {
      return d[1];
    };
    xScale = d3.time.scale();
    yScale = d3.scale.linear();
    keyMap = function(d) {
      return d['key'];
    };
    valuesMap = function(d) {
      return d['values'];
    };
    keyFilter = function(d) {
      return true;
    };
    mouseEvents = d3.dispatch('mouseover', 'mouseout');
    chart = function(selection) {
      return selection.each(function(raw) {
        var $svg, xAxis, yAxis;

        xScale.range([0, width - margin.left - margin.right]);
        yScale.range([height - margin.top - margin.bottom, 0]);
        xAxis = d3.svg.axis().scale(xScale).orient('bottom').tickSize(-height + margin.top + margin.bottom, 0, 0);
        yAxis = d3.svg.axis().scale(yScale).orient('left').tickSize(-width + margin.left + margin.right, 0, 0);
        $svg = d3.select(this).append('svg').attr('width', width).attr('height', height).append('g').attr('transform', "translate(" + margin.left + "," + margin.top + ")");
        $svg.append('g').attr('class', 'x axis');
        $svg.select('.x.axis').attr('transform', 'translate(0, ' + (height - margin.top - margin.bottom) + ')');
        $svg.append('g').attr('class', 'y axis line');
        $svg.select('.y.axis.line').append('text').attr('transform', 'translate(20,0) rotate(90)').attr('y', 6).attr('dy', '.71em').style('text-anchor', 'start').text('Y');
        return chart.addStack = function(raw) {
          var $line, data, keys, layers, line, scaleLayers;

          data = raw.map(function(g) {
            return {
              key: keyMap(g),
              color: g.color,
              values: (valuesMap(g)).map(function(d) {
                return [xMap(d), yMap(d)];
              })
            };
          });
          keys = data.map(function(g) {
            return g.key;
          }).filter(keyFilter);
          line = d3.svg.line().interpolate('basis').x(function(d) {
            return xScale(d[0]);
          }).y(function(d) {
            return yScale(d[1]);
          });
          layers = data;
          layers = layers.map(function(layer) {
            if (keys.indexOf(layer.key) < 0) {
              layer.values.map(function(d) {
                d[1] = 0;
                return d;
              });
            }
            return layer;
          });
          xScale.domain(d3.extent(layers[0].values.map(function(d) {
            return d[0];
          })));
          $svg.select('.x.axis').transition().duration(1500).ease("sin-in-out").call(xAxis);
          scaleLayers = data.filter(function(g) {
            return keys.indexOf(g.key) > -1;
          });
          yScale.domain([
            0, d3.max(scaleLayers, function(g) {
              return d3.max(g.values, function(d) {
                return d[1];
              });
            })
          ]);
          $svg.select('.y.axis.line').transition().duration(1500).ease("sin-in-out").call(yAxis);
          $svg.select('.y.axis.line > text').text(typeof label !== "undefined" && label !== null ? label : '');
          $line = $svg.selectAll('.data.line').data(layers);
          $line.enter().append('path').attr('class', 'data line');
          $line.attr('data-key', function(d) {
            return d.key;
          }).style('stroke', function(d) {
            return d.color;
          }).on('mouseover', function(d) {
            return mouseEvents.mouseover(d.key);
          }).on('mouseout', function(d) {
            return mouseEvents.mouseout(d.key);
          });
          return $line.transition().duration(500).attr('d', function(d) {
            return line(d.values);
          }).style('opacity', function(d) {
            if (keys.indexOf(d.key) < 0) {
              return 0;
            } else {
              return 1;
            }
          });
        };
      });
    };
    chart.mouseover = function(delegate) {
      mouseEvents.on('mouseover', delegate);
      return chart;
    };
    chart.mouseout = function(delegate) {
      mouseEvents.on('mouseout', delegate);
      return chart;
    };
    chart.key = function(map) {
      keyMap = map != null ? map : keyMap;
      return chart;
    };
    chart.keyFilter = function(filter) {
      keyFilter = filter != null ? filter : keyFilter;
      return chart;
    };
    chart.values = function(map) {
      valuesMap = map != null ? map : valuesMap;
      return chart;
    };
    chart.x = function(map) {
      xMap = map != null ? map : xMap;
      return chart;
    };
    chart.y = function(map) {
      yMap = map != null ? map : yMap;
      return chart;
    };
    chart.height = function(val) {
      height = val != null ? val : height;
      return chart;
    };
    return chart;
  };

}).call(this);
