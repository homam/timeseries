// Generated by CoffeeScript 1.6.2
(function() {
  d3.csv('charts/simple/data/iraq-android-refs.json', function(data) {
    var $ref, changeScale, chartedData, convChart, dateRange, drawCharts, groups, msInaDay, parseDate, refs, visitsChart;

    parseDate = d3.time.format("%m/%d/%Y").parse;
    data = data.map(function(d) {
      d.date = parseDate(d.date);
      d.visits = +d.visits;
      d.subs = +d.subs;
      d.conv = +d.conv;
      return d;
    });
    groups = _(data).groupBy(function(d) {
      return d.ref;
    });
    refs = _.chain(groups).keys().map(function(ref) {
      return {
        ref: ref,
        visits: groups[ref].map(function(d) {
          return d.visits;
        }).reduce(function(a, b) {
          return a + b;
        })
      };
    }).sortBy(function(r) {
      return -r.visits;
    }).value();
    dateRange = d3.extent(data.map(function(d) {
      return d.date;
    }));
    msInaDay = 24 * 60 * 60 * 1000;
    _.keys(groups).forEach(function(key) {
      var date, group, i, index, _i, _ref, _ref1, _results;

      group = groups[key];
      index = -1;
      _results = [];
      for (i = _i = _ref = +dateRange[0], _ref1 = +dateRange[1]; msInaDay > 0 ? _i <= _ref1 : _i >= _ref1; i = _i += msInaDay) {
        ++index;
        date = new Date(i);
        if (!_(group).some(function(d) {
          return Math.abs(+d.date - +date) < 1000;
        })) {
          group.splice(index, 0, {
            date: date,
            visits: 0,
            subs: 0,
            conv: 0
          });
          _results.push(groups[key] = group);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
    visitsChart = lineBarTimeSeriesChart().x(function(d) {
      return d.date;
    }).y(function(d) {
      return d.visits;
    }).yB(function(d) {
      return d.subs;
    });
    convChart = lineBarTimeSeriesChart().x(function(d) {
      return d.date;
    }).y(function(d) {
      return d.conv;
    });
    d3.select('#visitsChart').call(visitsChart);
    d3.select('#convChart').call(convChart);
    changeScale = false;
    chartedData = groups['wap p155'];
    drawCharts = function() {
      var scaleData;

      scaleData = changeScale ? chartedData : data;
      visitsChart.xScale(d3.extent(scaleData, function(d) {
        return d.date;
      }));
      visitsChart.yScale(d3.extent(scaleData, function(d) {
        return d.visits;
      }));
      visitsChart.addLine(chartedData);
      visitsChart.yBScale(d3.extent(scaleData, function(d) {
        return d.subs;
      }));
      visitsChart.addBar(chartedData);
      convChart.xScale(d3.extent(scaleData, function(d) {
        return d.date;
      }));
      convChart.yScale(d3.extent(scaleData.filter(function(d) {
        return d.visits > 100;
      }), function(d) {
        return d.conv;
      }));
      return convChart.addLine(chartedData);
    };
    drawCharts();
    d3.select('#changeScale').on('change', function() {
      changeScale = this.checked;
      return drawCharts();
    });
    _.templateSettings = {
      interpolate: /\{\{(.+?)\}\}/g
    };
    $ref = d3.select('#refSelector').selectAll('div.ref').data(refs);
    $ref.enter().append('div').attr('class', 'ref').attr('data-ref', function(d) {
      return d.ref;
    });
    $ref.append('input').attr('type', 'radio').attr('name', 'ref').attr('id', function(d) {
      return d.ref;
    }).on('change', function(d) {
      chartedData = groups[d.ref];
      return drawCharts();
    });
    $ref.append('label').attr('for', function(d) {
      return d.ref;
    }).text(function(d) {
      return d.ref;
    });
    return d3.select('[data-ref="wap p155"] input').attr('checked', 'checked');
  });

}).call(this);
